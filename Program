/*public class Program
{
    public static void Main( )
    {
        int[,] maze = {
            {0, 0, 1, 0, 0},
            {0, 0, 0, 0, 1},
            {1, 1, 0, 0, 0},
            {1, 1, 1, 0, 0},
            {0, 0, 0, 0, 0}
        };
        int[,] solution = new int[maze.Length+1, maze.Length+1];
        for(int i = 0; i < maze.Length/5; i++){
            for(int l = 0; l < maze.Length/5; l++){
                solution[i,l] = maze[i,l];
                solution[maze.Length/5, l] = 1;
                solution[i, maze.Length/5] = 1;
                solution[maze.Length/5, maze.Length/5] = 1;
                solution[maze.Length/5-1, maze.Length/5] = 0;
            }
        }
        
        bool stop = true;
        solution[0,0] = 2;
        for(int i = 0; i < maze.Length/5 && stop; i++){
            for(int l = 0; l < maze.Length/5 && stop; l++){
                if(solution[i,l] >= 2 && stop){

                    if(solution[i,l+1] != 1 && solution[i+1,l] != 1){
                        if(solution[i+2,l] != 1){
                            if(solution[i+1,l+1] != 1){
                                solution[i+1,l] = solution[i,l]+3;
                                solution[i+2,l] = solution[i,l]+4;
                                solution[i,l+1] = solution[i,l]+1;
                                solution[i+1,l+1] = solution[i,l]+2;
                                solution[i+2,l+1] = solution[i,l]+5;
                                if(solution[4,4] == 12) {
                                    stop = !stop;
                                }
                            } else {
                                solution[i,l+1] = solution[i,l]+1;
                                solution[i+1,l] = solution[i,l]+1;
                            }

                        } else {
                            solution[i,l+1] = solution[i,l]+1;
                            solution[i+1,l] = solution[i,l]+1;
                        }
                    } else if(solution[i+1,l] !=1){
                        if(solution[i+1,l] == 0){
                            solution[i+1,l] = solution[i,l]+1;
                        } else {
                            solution[i+1,l] = solution[i,l]+1;
                        }
                    } else if(solution[i,l+1] != 1){
                        if(solution[i,l+1] == 0){
                            solution[i,l+1] = solution[i,l]+1;
                        } else {
                            solution[i,l+1] = solution[i,l]+1;
                        }
                    }
                }
            }
        }
        
        for (int i = 0; i < maze.GetLength(0); i++)
        {
            for (int j = 0; j < maze.GetLength(1); j++)
            {
                System.Console.Write(solution[i,j] + "\t");
            }
            System.Console.WriteLine();
        }
        
    }
}*/

public class Program
{
    public static void Main( )
    {
        int[,] maze = {
            {0, 0, 1, 0, 0},
            {0, 0, 0, 0, 1},
            {1, 1, 0, 0, 0},
            {1, 1, 1, 0, 0},
            {0, 0, 0, 0, 0}
        };
        
        int mazeDivider = 5;
        int[,] solution = new int[maze.Length+1, maze.Length+1];
        for(int i = 0; i < maze.Length/mazeDivider; i++){
            for(int l = 0; l < maze.Length/mazeDivider; l++){
                solution[i,l] = maze[i,l];
            }
        }

        for(int i = 0; i < maze.Length/mazeDivider; i++){
            for(int l = 0; l < maze.Length/mazeDivider; l++){
                solution[i+1,l+1] = maze[i,l];
            }
        }

        for(int i = 0; i < maze.Length/mazeDivider+2; i++){
            for(int l = 0; l < maze.Length/mazeDivider+2; l++){
                solution[maze.Length/mazeDivider+1, l] = 1;
                solution[i, maze.Length/mazeDivider+1] = 1;
                solution[i, 0] = 1;
                solution[0, l] = 1;
                solution[maze.Length/mazeDivider, maze.Length/mazeDivider+1] = 0;
            }
        }
        int[,] blocks = new int[maze.Length+1, maze.Length+1];
        for(int i = 0; i < maze.Length/mazeDivider+2; i++){
            for(int l = 0; l < maze.Length/mazeDivider+2; l++){
                if(solution[i,l] == 1){
                    blocks[i,l] = solution[i,l];
                }
            }
        }
        

        
        //+1 = right/ down
        //-1 = left / up
        bool stop = true;
        solution[1,1] = 2;
        for(int i = 0; i < maze.Length/mazeDivider+2 && stop; i++){
            for(int l = 0; l < maze.Length/mazeDivider+2 && stop; l++){
                if(solution[i,l] >= 2 && stop){
                    int right = solution[i,l+1], left = solution[i,l-1], up = solution[i-1,l], down = solution[i+1,l];
                    bool right2 = (solution[i,l+1] != solution[i,l]+1 && solution[i,l+1] != 1),left2 = (solution[i,l-1] != solution[i,l]-1 && solution[i,l-1] != 1) , up2 = (solution[i-1,l] != solution[i,l]-1 && solution[i-1,l] != 1), down2 = (solution[i+1,l] != solution[i,l]+1 && solution[i+1,l] != 1);
                    if(right != 1 && down != 1 && solution[i+1,l+1] != 1 && solution[i+2,l] != 1 && solution[i+2, l+1] != 1){
                        solution[i,l+1] = solution[i,l]+1;
                        solution[i+1,l+1] = solution[i,l]+2;
                        solution[i+1,l] = solution[i,l]+3;
                        solution[i+2,l] = solution[i,l]+4;
                        solution[i+2,l+1] = solution[i,l]+5;
                        stop = false;
                    } else if(right != 1 && right2){ // +right
                        if(left != 1 && left2){ // +left
                            if(down != 1 && down2){ // +down
                                if(up != 1 && up2){ // +up
                                    //Right, left, down, up
                                    solution[i,l+1] = solution[i,l]+1;
                                    solution[i,l-1] = solution[i,l]+1;
                                    solution[i+1,l] = solution[i,l]+1;
                                    solution[i-1,l] = solution[i,l]+1;

                                } else { // -up
                                    //Right, Left, down
                                    solution[i,l+1] = solution[i,l]+1;
                                    solution[i,l-1] = solution[i,l]+1;
                                    solution[i+1,l] = solution[i,l]+1;
                                }
                            } else { // -down
                                if(up != 1 && up2){ // +up
                                    //Right, left, up
                                    solution[i,l+1] = solution[i,l]+1;
                                    solution[i,l-1] = solution[i,l]+1;
                                    solution[i-1,l] = solution[i,l]+1;
                                } else { // -up
                                    //Right, left
                                    solution[i,l+1] = solution[i,l]+1;
                                    solution[i,l-1] = solution[i,l]+1;
                                }
                            }
                        } else { // -left
                            if(up != 1 && up2){ // +up
                                if(down != 1 && down2){ // +down
                                    //Right, up, down
                                    solution[i,l+1] = solution[i,l]+1;
                                    solution[i+1,l] = solution[i,l]+1;
                                    solution[i-1,l] = solution[i,l]+1;
                                } else { // -down
                                    //Right, up
                                    solution[i-1,l] = solution[i,l]+1;
                                    solution[i,l+1] = solution[i,l]+1;
                                }
                            } else { // -up, 
                                if(down != 1 && down2){//+down
                                    //Right, down
                                    solution[i,l+1] = solution[i,l]+1;
                                    solution[i+1,l] = solution[i,l]+1;
                                } else { //-down
                                    //Right
                                    solution[i,l+1] = solution[i,l]+1;
                                }
                            }
                        }
                    } else { // -right
                        if(left != 1 && left2){ // +left
                            if(up != 1){ //+up
                                if(down != 1 && down2){ //+down
                                    //Left, up, down
                                    solution[i+1,l] = solution[i,l]+1;
                                    solution[i-1,l] = solution[i,l]+1;
                                    solution[i,l-1] = solution[i,l]+1;
                                } else { // -down
                                //left, up
                                solution[i,l-1] = solution[i,l]+1;
                                solution[i-1,l] = solution[i,l]+1;
                                }
                            } else {//-up
                                if(down != 1 && down2){//+down
                                    //Left, down
                                    solution[i,l-1] = solution[i,l]+1;
                                    solution[i+1,l] = solution[i,l]+1;
                                } else {//-down
                                    //left
                                    solution[i,l-1] = solution[i,l]+1;
                                }
                            }
                        } else { // -left
                            if(up != 1 && up2){ //+up
                                if(down != 1 && down2){ //+down
                                    //Up, down
                                    solution[i+1,l] = solution[i,l]+1;
                                    solution[i-1,l] = solution[i,l]+1;
                                } else { //-down
                                    //Up
                                    solution[i-1,l] = solution[i,l]+1;
                                }
                            } else { //-up
                                //Down
                                solution[i+1,l] = solution[i,l]+1;
                            }
                        }
                    }
                }
            }
        }



       
        for (int i = 1; i < maze.GetLength(0)+1; i++)
        {
            for (int j = 1; j < maze.GetLength(1)+1; j++)
            {
                System.Console.Write(solution[i,j] + "\t");
            }
            System.Console.WriteLine();
        }
    }
}
